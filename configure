#!/bin/sh 

# configure script for MuiString kernel
# Originally written by MadTirra <madtirra@jarios.org>
# MuiString core development team (c) 2008

help() {
    echo "Configure script for muistring kernel"
    echo ""
    echo "General options:"
    echo "--help Prints this help info"
    echo ""
    echo "Architecture options:"
    echo "--arch= Target architecture"
    echo "        Available targets:"
    echo "        amd64 - Generic amd64 (long mode) (default)"
    echo ""
    echo "Specific hardware options:"
    echo ">>SMP options"
    echo "--with-smp     Build with SMP support (default)"
    echo "--without-smp  Build without SMP support"
    echo "--n-cpu=       Number of CPUs to run (default: 2)"
    echo "--max-cpus=    Max CPUs to be supported (default: 8)"
    echo ">>IOMMU support"
    echo "--with-iommu     Build with IOMMU support (default)"
    echo "--without-iommu  Build without IOMMU support"
    echo ""
    echo "Specific kernel build options:"
    echo ">>Inline option"
    echo "--enable-always-inline (default)"
    echo "--disable-always-inline"
    echo ""
    echo "Specific kernel memory manager options:"
    echo "--idalloc-pages=           Number of pages idalloc used (default: 2)"
    echo "--kernel-core-stack-pages= Kernel core stack pages to be used (default: 2)"
    echo ""
    echo "Toolchain options:"
    echo "--with-native-toolchain Use host toolchain to build kernel"
    echo "       NOTE: this will override all toolchain options"
    echo "--with-gcc=     Path to GNU GCC compiler"
    echo "--with-as=      Path to GNU AS"
    echo "--with-ld=      Path to linker"
    echo "--with-objcopy= Path to objcopy"
    echo "--with-objdump= Path to objdump"
    echo "--binutils-dir= Path where binutils tools are located"
    echo "       NOTE: this will override --with-ld,--with-objcopy,--with-objdump"
    echo "       options"
    echo ""
    echo "Tools options:"
    echo ">>GNU make options"
    echo "--with-make= Path to GNU Make"
    echo ">>Misc tools options"
    echo "--with-native-tools Use host environment tools"
    echo ""
    echo "Debug options:"
    echo "--debgu-mm   Enable memory management debugging"
    echo "--debug-slab Enable slabs debugging"
    echo ""
    echo "configure script version 0.1"
}

# Default values for configure
# Core values for build
ARCH="amd64"
CONFIG_SMP="yes"
DEBUG="yes"
DEBUG_MM="yes"
# Extra build parameters
CONFIG_ALWAYS_INLINE="yes"
CONFIG_IOMMU="yes"
IDALLOC_PAGES=2
KERNEL_CORE_STACK_PAGES=2
NR_CPUS=2
MAX_CPUS=8
# Toolchain config
CC=`which gcc`
BINUTILS="/usr/bin/"
BINUTILSDIR="not_used"
AS=`which as`
# Tools config
MAKE=`which make`
GREP=`which grep`
ECHO=`which echo`
LN=`which ln`
TOOLS="native"
DEBUG_SLAB="no"

# reading parameters
loop=0
while [ $# -ne 0 ]; do
    case $1 in
	"--help")
	    help
	    exit 0
	    ;;
	--arch=*)
	ARCH=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-smp)
	CONFIG_SMP="yes"
	;;
	--without-smp)
	CONFIG_SMP="no"
	;;
	--debug=*)
	DEBUG=`echo $1 | awk -F= {'print $2'}`
	;;
	--debug-mm=*)
	DEBUG_MM=`echo $1 | awk -F= {'print $2'}`
	;;
	--enable-always-inline)
	CONFIG_ALWAYS_INLINE="yes"
	;;
	--disable-always-inline)
	CONFIG_ALWAYS_INLINE="no"
	;;
	--with-mmu)
	CONFIG_IOMMU="yes"
	;;
	--without-mmu)
	CONFIG_IOMMU="no"
	;;
	--idalloc-pages=*)
	IDALLOC_PAGES=`echo $1 | awk -F= {'print $2'}`
	;;
	--kernel_core_stack_pages=*)
	KERNEL_CORE_STACK_PAGES=`echo $1 | awk -F= {'print $2'}`
	;;
	--n-cpu=*)
	NR_CPUS=`echo $1 | awk -F= {'print $2'}`
	;;
	--max-cpus=*)
	MAX_CPUS=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-native-toolchain)
	BINUTILS="native"
	;;
	--with-native-tools)
	TOOLS="native"
	;;
	--with-gcc=*)
	CC=`echo $1 | awk -F= {'print $2'}`
	;;
	--binutils-dir=*)
	BINUTILSDIR=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-make=*)
	MAKE=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-as=*)
	AS=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-ld=*)
	LD=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-objcopy=*)
	OBJCOPY=`echo $1 | awk -F= {'print $2'}`
	;;
	--with-objdump=*)
	OBJDUMP=`echo $1 | awk -F= {'print $2'}`
	;;
    --debug-slab=*)
    DEBUG_SLAB=`echo $1 | awk -F= {'print $2'}`
    ;;
    esac
    shift
done

# Checking given parameters
# arch
case $ARCH in
    amd64)
	# yummi, doesn't do anything
	;;
    *)
	echo "Given ($ARCH) architecture doesn't supported or invalid."
	exit 1
	;;
esac

# features
if [ $DEBUG != "yes" -a $DEBUG != "no"  ];then
    echo "Unknown value $DEBUG is given, ignoring."
    DEBUG="yes"
fi

if [ $DEBUG_MM != "yes" -a $DEBUG_MM != "no"  ];then
    echo "Unknown value $DEBUG is given, ignoring."
    DEBUG_MM="yes"
fi
# override if other given
if [ $BINUTILSDIR != "not_used" ];then
    LD=$BINUTILSDIR/ld
    AS=$BINUTILSDIR/as
    OBJDUMP=$BINUTILSDIR/objdump
    OBJCOPY=$BINUTILSDIR/objcopy
    GCC=$BINUTILSDIR/gcc
fi
# override if native tools and toolchain are used
if [ $BINUTILS = "native" ];then
    CC=`which gcc`
    AS=`which as`
    LD=`which ld`
    OBJDUMP=`which objdump`
    OBJCOPY=`which objcopy`
fi

if [ $TOOLS = "native" ];then
    GREP=`which grep`
    ECHO=`which echo`
    LN=`which ln`
fi

# Now we're need to prepare config (from config.in)
printf "Processing config ..."
echo "# This file was created automatically" > config
echo "# via muistring configure script" >> config
cat config.in >> config
# ARCH
sed -i s/%arch/$ARCH/g config
# DEBUG
if [ $DEBUG = "yes" ];then
sed -i s/%debug/y/g config
else
sed -i s/%debug/n/g config
fi
# CONFIG_SMP
if [ $DEBUG = "yes" ];then
sed -i s/%smp/y/g config
else
sed -i s/%smp/n/g config
fi
echo " " >> config
echo "# end of config " >> config
echo " " >> config
printf "OK\n"


# Process Makefile.inc (from Makefile.inc.in)
printf "Processing Makefile.inc ..."
echo "# This file was created automatically" > Makefile.inc
echo "# via muistring configure script" >> Makefile.inc
cat Makefile.inc.in >> Makefile.inc
# CC
cc=`echo $CC | sed 's|\/|\\\/|g'`
sed -i s/%cc/$cc/g Makefile.inc
# MAKE
make=`echo $MAKE | sed 's|\/|\\\/|g'`
sed -i s/%make/$make/g Makefile.inc
# LD
ld=`echo $LD | sed 's|\/|\\\/|g'`
sed -i s/%ld/$ld/g Makefile.inc
# OBJDUMP
objdump=`echo $OBJDUMP | sed 's|\/|\\\/|g'`
sed -i s/%objdump/$objdump/g Makefile.inc
# OBJCOPY
objcopy=`echo $OBJCOPY | sed 's|\/|\\\/|g'`
sed -i s/%objcopy/$objcopy/g Makefile.inc
# AS
as=`echo $AS | sed 's|\/|\\\/|g'`
sed -i s/%as/$as/g Makefile.inc
# GREP
grep=`echo $GREP | sed 's|\/|\\\/|g'`
sed -i s/%grep/$grep/g Makefile.inc
# ECHO
echofq=`echo $ECHO | sed 's|\/|\\\/|g'`
sed -i s/%echo/$echofq/g Makefile.inc
# LN
ln=`echo $LN | sed 's|\/|\\\/|g'`
sed -i s/%ln/$ln/g Makefile.inc
echo " " >> Makefile.inc
echo "# end of Makefile.inc" >> Makefile.inc
echo " " >> Makefile.inc

printf "OK\n"

# Process include/config.h (from include/config.h.in)
printf "Generating include/config.h ..."
conf_file="include/config.h"
echo "/*" > $conf_file
echo " * This file was automatically generated via muistring " >> $conf_file
echo " * configure script. " >> $conf_file
echo " * NOTE: you can add something else here, refer to SDK " >> $conf_file
echo " * documentation for information on this " >> $conf_file
echo " * (c) 2008 MuiString Core Development Team " >> $conf_file
echo " * http://mstring.jarios.org " >> $conf_file
echo " */" >> $conf_file
echo " " >> $conf_file
echo "#ifndef __CONFIG_H__" >> $conf_file
echo "#define __CONFIG_H__" >> $conf_file
echo " " >> $conf_file
echo "/* General config */" >> $conf_file
# always inline 
if [ $CONFIG_ALWAYS_INLINE = "yes" ];then
echo "#define CONFIG_ALWAYS_INLINE" >> $conf_file
fi
echo " " >> $conf_file

echo "/* mm related config options */" >> $conf_file
if [ $CONFIG_IOMMU = "yes" ];then
echo "#define CONFIG_IOMMU" >> $conf_file
fi
echo "#define IDALLOC_PAGES            $IDALLOC_PAGES" >> $conf_file
echo "#define KERNEL_CORE_STACK_PAGES  $KERNEL_CORE_STACK_PAGES" >> $conf_file
echo " " >> $conf_file

echo "/* smp related config options */" >> $conf_file
echo "#define NR_CPUS   $NR_CPUS" >> $conf_file
echo "#define MAX_CPUS  $MAX_CPUS" >> $conf_file
echo " " >> $conf_file

# debugging stuff
echo "/* debugging stuff */" >> $conf_file
if [ $DEBUG = "yes" ];then
echo "#define DEBUG_GENERAL" >> $conf_file
fi
if [ $DEBUG_MM = "yes" ];then
echo "#define DEBUG_MM" >> $conf_file
fi
if [ $DEBUG_SLAB = "yes" ]; then
echo "#define DEBUG_SLAB" >> $conf_file
fi

echo " " >> $conf_file
echo "#endif /* __CONFIG_H__ */" >> $conf_file
echo "/* end of config.h */" >> $conf_file
echo " " >> $conf_file

printf "OK\n"

