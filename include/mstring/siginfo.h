#ifndef __MSTRING_SIGINFO_H__
#define __MSTRING_SIGINFO_H__

#include <mstring/types.h>
#include <mstring/task.h>

typedef union sigval {
  int sival_int;
  void *sival_ptr;
} sigval_t;

typedef struct __usiginfo {
	int	si_signo;		/* signal number */
	int	si_errno;		/* errno association */
	int	si_code;		/* signal code */
	pid_t	si_pid;			/* sending process */
    tid_t   si_tid;         /* sending thread */
	uid_t	si_uid;			/* sender's ruid */
	int	si_status;		/* exit value */
	void	*si_addr;		/* faulting instruction */
	union sigval si_value;		/* signal value */
	union	{
		struct {
			int	_trapno;/* machine specific trap code */
		} _fault;
		struct {
			int	_timerid;
			int	_overrun;
		} _timer;
		struct {
			int	_mqd;
		} _mesgq;
        struct {
            long    _band;/* band event for SIGPOLL */
        } _poll;
	} _reason;
} usiginfo_t;

#define si_trapno	_reason._fault._trapno
#define si_timerid	_reason._timer._timerid
#define si_overrun	_reason._timer._overrun
#define si_mqd		_reason._mesgq._mqd
#define si_band		_reason._poll._band

typedef struct __ksiginfo {
  usiginfo_t user_siginfo;
  task_t *target;
} ksiginfo_t;

struct sigevent {
  int sigev_notify;
  int sigev_signo;
  union sigval sigev_value;
  tid_t tid;
};

enum signal_codes {
    /**
     * SIGILL related signal codes
     */
    ILL_ILLOPC = 1, /**< Illegal opcode */
    ILL_ILLOPN,     /**< Illegal operand */
    ILL_ILLADR,     /**< Illegal addressing mode */
    ILL_ILLTRP,     /**< Illegal trap */
    ILL_PRVOPC,     /**< Priveleged opcode */
    ILL_PRVREG,     /**< Priveleged register */
    ILL_COPROC,     /**< Coprocessor error */
    ILL_BADSTK,     /**< Internal stack error */

   /**
    * SIGFPE related signal codes
    */
    FPE_INTDIV,     /**< Integer devide error */
    FPE_INTOVF,     /**< Integer overflow */
    FPE_FLTDIV,     /**< Floating point devide by zero */
    FPE_FLTOVF,     /**< Floating point overfolow */
    FPE_FLTUND,     /**< Floating point underflow */
    FPE_FLTRES,     /**< Floating point inexact result */
    FPE_FLTINV,     /**< Invalid floating-point operation */
    FPE_FLTSUB,     /**< Subscript out of range */

    /**
     * SIGSEGV related signal codes
     */
    SEGV_MAPERR,    /**< Address not mapped to object */
    SEGV_ACCERR,    /**< Invalid permissons for mapped object */

    /**
     * SIGBUS related signal codes
     */
    BUS_ADRALN,     /**< Invalid address alignment */
    BUS_ADRERR,     /**< Nonexistent physical address */
    BUS_OBJERR,     /**< Object-specific hardware error */

    /**
     * SIGTRAP related signal codes
     */
    TRAP_BRKPT,     /**< Process breakpoint */
    TRAP_TRACE,     /**< Process trace trap */

    /**
     * SIGCHLD related signal codes
     */
    CLD_EXITED,     /**< Child has exited */
    CLD_KILLED,     /**< Child has terminated abnormally and didn't
                     *   create a core file */
    CLD_DUMPED,     /**< Child has terminated abnormally and
                     *   created a core file */
    CLD_TRAPPED,    /**< Traced child has trapped */
    CLD_STOPPED,    /**< Child has stopped */
    CLD_CONTINUED,  /**< Stopped child has continued */

    /**
     * SIGPOLL related signal codes
     */
    POLL_IN,        /**< Data input available */
    POLL_OUT,       /**< Output buffers available */
    POLL_MSG,       /**< Input message available */
    POLL_ERR,       /**< I/O error */
    POLL_PRI,       /**< High priority input available */
    POLL_HUP,       /**< Device disconnected */

    /**
     * Any
     */
    SI_USER,        /**< Signal sent by kill */
    SI_QUEUE,       /**< Signal sent by sigqueue */
    SI_TIMER,       /**< Signal generated by expiration of
                     *   timer set by timer_settime() */
    SI_ASYNCIO,     /**< Signal generated by completion of an
                     *   asynchronous I/O request */
    SI_MESGQ,       /**< Signal generated by arrival of a message on
                     *   an empty message queue */
};

#define INIT_SIGEVENT(e)                        \
    (e).sigev_notify=SIGEV_SIGNAL;              \
       (e).sigev_signo=SIGALRM                  \

void siginfo_initialize(task_t *caller, usiginfo_t *siginfo);

#endif /* !__MSTRING_SIGINFO_H__ */
